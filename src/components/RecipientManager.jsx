// src/components/RecipientManager.jsx
import React, { useState } from 'react';
import { useReadContract, useWriteContract, useWaitForTransactionReceipt } from 'wagmi';
import { isAddress } from 'viem';
// üëá –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ORGANIZATIONS –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
import { CONTRACT_ADDRESS, ABI } from '../constants';
import { ORGANIZATIONS } from '../organizations';

export default function RecipientManager({ t }) {
  const [newRecipient, setNewRecipient] = useState('');
  const [errorMessage, setErrorMessage] = useState('');

  const { data: hash, isPending, writeContract } = useWriteContract();

  // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ù–ê–ü–†–Ø–ú–£–Æ –ò–ó –ö–û–ù–¢–†–ê–ö–¢–ê
  const { data: recipients, refetch: refetchRecipients } = useReadContract({
    address: CONTRACT_ADDRESS,
    abi: ABI,
    functionName: 'getWhitelistedRecipients',
    watch: true,
  });
  
  const { isLoading: isConfirming } = useWaitForTransactionReceipt({
    hash,
    onSuccess: () => refetchRecipients(),
  });

  const handleAddRecipient = () => {
    setErrorMessage('');
    if (!isAddress(newRecipient)) {
      setErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Ethereum-–∞–¥—Ä–µ—Å.');
      return;
    }
    writeContract({
      address: CONTRACT_ADDRESS,
      abi: ABI,
      functionName: 'addRecipient',
      args: [newRecipient],
    });
    setNewRecipient('');
  };

  // --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞ ---
  const handleUpdateEqualPreset = async () => {
    console.log("Updating 'equal' preset...");

    const currentRecipients = ORGANIZATIONS.map(org => org.address);
    if (currentRecipients.length === 0) {
        alert("–°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ñ–∞–π–ª–µ organizations.js –ø—É—Å—Ç!");
        return;
    }

    const thisProjectOrg = ORGANIZATIONS.find(org => org.key === 'thisproject');
    if (!thisProjectOrg) {
        alert("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è 'thisproject' –≤ —Ñ–∞–π–ª–µ organizations.js");
        return;
    }

    const totalPercentage = 10000;
    const recipientCount = currentRecipients.length;
    const equalShare = Math.floor(totalPercentage / recipientCount);
    const remainder = totalPercentage % recipientCount;
    const percentages = currentRecipients.map(() => equalShare);
    const thisProjectIndex = currentRecipients.findIndex(addr => addr.toLowerCase() === thisProjectOrg.address.toLowerCase());

    if (thisProjectIndex !== -1) {
        percentages[thisProjectIndex] += remainder;
    } else {
        percentages[0] += remainder; 
    }

    writeContract({
        address: CONTRACT_ADDRESS,
        abi: ABI,
        functionName: 'updatePreset',
        args: ['equal', currentRecipients, percentages],
    });
  };

  return (
    <div className="card">
      <h2 className="card__title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Whitelist –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ</h2>
      
      <div style={{ marginBottom: '1.5rem' }}>
        <h3>–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç</h3>
        <div style={{ display: 'flex', gap: '0.5rem' }}>
          <input
            type="text"
            value={newRecipient}
            onChange={(e) => setNewRecipient(e.target.value)}
            placeholder="0x..."
            className="form-input"
            style={{ flexGrow: 1 }}
          />
          <button 
            onClick={handleAddRecipient} 
            disabled={isPending || isConfirming} 
            className="form-button"
          >
            {isPending ? '–ü–æ–¥–ø–∏—à–∏—Ç–µ...' : isConfirming ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
          </button>
        </div>
        {errorMessage && <p style={{ color: 'red', fontSize: '0.8rem', marginTop: '0.5rem' }}>{errorMessage}</p>}
      </div>
      
      <div style={{ marginBottom: '1.5rem', borderTop: '1px solid #eee', paddingTop: '1.5rem' }}>
        <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–æ–º "equal"</h3>
        <p style={{fontSize: '0.8rem', opacity: 0.7}}>
            –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–µ—Å–µ—Ç 'equal' –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞ `organizations.js`.
        </p>
        <button
            onClick={handleUpdateEqualPreset}
            disabled={isPending || isConfirming}
            className="form-button"
        >
            {isPending ? '–ü–æ–¥–ø–∏—à–∏—Ç–µ...' : isConfirming ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ—Å–µ—Ç "equal"'}
        </button>
      </div>

      <div>
        <h3>–¢–µ–∫—É—â–∏–π Whitelist –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ ({recipients?.length || 0})</h3>
        <p style={{fontSize: '0.8rem', opacity: 0.7, marginTop: '-0.5rem'}}>
            –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ whitelist —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
        </p>
        <ul style={{ listStyle: 'none', padding: 0, maxHeight: '200px', overflowY: 'auto', background: '#f9f9f9', border: '1px solid #eee', borderRadius: '4px' }}>
          {recipients && recipients.map((addr) => (
            <li key={addr} style={{ fontFamily: 'monospace', padding: '0.25rem 0.5rem', borderBottom: '1px solid #eee' }}>
              {addr}
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}