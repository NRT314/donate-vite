// src/components/NrtBalance.jsx
import { useAccount, useReadContract } from 'wagmi';
import { formatUnits } from 'viem';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –û–ë–ê –∞–¥—Ä–µ—Å–∞, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import { CONTRACT_ADDRESS, ERC20_ABI } from '../constants';

export default function NrtBalance({ t }) {
  const { address, isConnected } = useAccount();

  // –í—ã–∑—ã–≤–∞–µ–º balanceOf –∏–∑ –û–°–ù–û–í–ù–û–ì–û –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ–Ω–∞—Ç–æ–≤,
  // —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∂–µ —è–≤–ª—è–µ—Ç—Å—è –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º NRT-—Ç–æ–∫–µ–Ω–∞.
  const { data: balance, isLoading } = useReadContract({
    // üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º CONTRACT_ADDRESS –≤–º–µ—Å—Ç–æ NRT_VOTING_TOKEN_ADDRESS
    address: CONTRACT_ADDRESS,
    abi: ERC20_ABI,
    functionName: 'balanceOf',
    args: [address],
    query: {
      enabled: isConnected,
    },
  });

  if (!isConnected) {
    return null;
  }

  // NRT-—Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç 18 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const formattedBalance = balance ? parseFloat(formatUnits(balance, 18)).toLocaleString('ru-RU') : '0';

  return (
    <div className="nrt-balance">
      {isLoading 
        ? `${t.nrt_balance_loading || '–ó–∞–≥—Ä—É–∑–∫–∞...'}`
        : `${t.nrt_balance_label || '–£ –≤–∞—Å'} ${formattedBalance} NRT`
      }
    </div>
  );
}